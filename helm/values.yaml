replicaCount: 1

# Run the init job. Will initialize all the NATS resources.
# Also, configure everything about the init here

nats:
  initJob:
    enabled: true
  url: ""
  user: "" # if set, must also set NATS_PASSWORD in secrets.name
  useCompression: true
  subjectPrefix: nalpaca # all subjects will have this prefix attached
  defaultStreamConfig:
    max_consumers: -1
    max_msgs_per_subject: -1
    max_msgs: -1
    max_bytes: -1
    max_age: 0
    max_msg_size: -1
    storage: "memory"
    discard: "old"
    num_replicas: 1
    duplicate_window: 20000000000
    compression: "s2"
    sealed: false
    deny_delete: false
    deny_purge: false
    allow_rollup_hdrs: false
    allow_direct: true
    mirror_direct: false
  defaultConsumerConfig:
    ack_policy: "explicit"
    ack_wait: 30000000000
    deliver_policy: "all"
    max_ack_pending: 1000
    max_deliver: 3
    max_waiting: 512
    replay_policy: "instant"
    num_replicas: 1

orders:
  enabled: true
  streamConfig: {}
  consumerConfig: {}

alpaca:
  url: https://paper-api.alpaca.markets
  apiKey: "" # API secret is under the "secrets" block
  oauth: ""
  retryLimit: 0
  retryDelay: 3s

# Secret config. Set the name of the secret to read from for the deployment
# The deployment accepts the following vars:
# ALPACA_API_SECRET (required)
# NATS_PASSWORD (only if you need NATS auth)
secrets:
  name: ""

conf:
  processingTimeout: 3s

logging:
  level: info # info | debug | warn | error
  fmt: json # json | logfmt
  src: true # log the line in the source code this occurred

metrics:
  disabled: true
  port: 8088
  writeTimeout: 10s # timeout if fulfilling metrics req takes this long
  errPolicy: return # when error is encountered: return  | continue | panic
  maxReqInFlight: 0 # HTTP 503 if this number is exceeded, but 0 means no limit

tracing:
  disabled: true
  exporter: otlp # stdout | otlp
  exportURL: "" # send metrics to this URL
  timeout: 5s # timeout sends after this duration

image:
  pullPolicy: IfNotPresent
  tag: "" # Overrides the image tag whose default is the chart appVersion.

nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
