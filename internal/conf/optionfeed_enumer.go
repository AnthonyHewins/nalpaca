// Code generated by "enumer -type optionFeed -text"; DO NOT EDIT.

package conf

import (
	"fmt"
	"strings"
)

const _optionFeedName = "indicativeopra"

var _optionFeedIndex = [...]uint8{0, 10, 14}

const _optionFeedLowerName = "indicativeopra"

func (i optionFeed) String() string {
	if i >= optionFeed(len(_optionFeedIndex)-1) {
		return fmt.Sprintf("optionFeed(%d)", i)
	}
	return _optionFeedName[_optionFeedIndex[i]:_optionFeedIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _optionFeedNoOp() {
	var x [1]struct{}
	_ = x[indicative-(0)]
	_ = x[opra-(1)]
}

var _optionFeedValues = []optionFeed{indicative, opra}

var _optionFeedNameToValueMap = map[string]optionFeed{
	_optionFeedName[0:10]:       indicative,
	_optionFeedLowerName[0:10]:  indicative,
	_optionFeedName[10:14]:      opra,
	_optionFeedLowerName[10:14]: opra,
}

var _optionFeedNames = []string{
	_optionFeedName[0:10],
	_optionFeedName[10:14],
}

// optionFeedString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func optionFeedString(s string) (optionFeed, error) {
	if val, ok := _optionFeedNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _optionFeedNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to optionFeed values", s)
}

// optionFeedValues returns all values of the enum
func optionFeedValues() []optionFeed {
	return _optionFeedValues
}

// optionFeedStrings returns a slice of all String values of the enum
func optionFeedStrings() []string {
	strs := make([]string, len(_optionFeedNames))
	copy(strs, _optionFeedNames)
	return strs
}

// IsAoptionFeed returns "true" if the value is listed in the enum definition. "false" otherwise
func (i optionFeed) IsAoptionFeed() bool {
	for _, v := range _optionFeedValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for optionFeed
func (i optionFeed) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for optionFeed
func (i *optionFeed) UnmarshalText(text []byte) error {
	var err error
	*i, err = optionFeedString(string(text))
	return err
}
