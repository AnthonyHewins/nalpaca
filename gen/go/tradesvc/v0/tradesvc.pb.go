// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tradesvc/v0/tradesvc.proto

package tradesvc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Side int32

const (
	Side_SIDE_UNSPECIFIED Side = 0
	Side_SIDE_BUY         Side = 1
	Side_SIDE_SELL        Side = 2
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "SIDE_UNSPECIFIED",
		1: "SIDE_BUY",
		2: "SIDE_SELL",
	}
	Side_value = map[string]int32{
		"SIDE_UNSPECIFIED": 0,
		"SIDE_BUY":         1,
		"SIDE_SELL":        2,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_tradesvc_v0_tradesvc_proto_enumTypes[0].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_tradesvc_v0_tradesvc_proto_enumTypes[0]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{0}
}

type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED   OrderType = 0
	OrderType_ORDER_TYPE_MARKET        OrderType = 1
	OrderType_ORDER_TYPE_LIMIT         OrderType = 2
	OrderType_ORDER_TYPE_STOP          OrderType = 3
	OrderType_ORDER_TYPE_STOP_LIMIT    OrderType = 4
	OrderType_ORDER_TYPE_TRAILING_STOP OrderType = 5
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_MARKET",
		2: "ORDER_TYPE_LIMIT",
		3: "ORDER_TYPE_STOP",
		4: "ORDER_TYPE_STOP_LIMIT",
		5: "ORDER_TYPE_TRAILING_STOP",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED":   0,
		"ORDER_TYPE_MARKET":        1,
		"ORDER_TYPE_LIMIT":         2,
		"ORDER_TYPE_STOP":          3,
		"ORDER_TYPE_STOP_LIMIT":    4,
		"ORDER_TYPE_TRAILING_STOP": 5,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_tradesvc_v0_tradesvc_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_tradesvc_v0_tradesvc_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{1}
}

type OrderClass int32

const (
	OrderClass_ORDER_CLASS_UNSPECIFIED OrderClass = 0
	OrderClass_ORDER_CLASS_BRACKET     OrderClass = 1
	OrderClass_ORDER_CLASS_OTO         OrderClass = 2
	OrderClass_ORDER_CLASS_OCO         OrderClass = 3
	OrderClass_ORDER_CLASS_SIMPLE      OrderClass = 4
)

// Enum value maps for OrderClass.
var (
	OrderClass_name = map[int32]string{
		0: "ORDER_CLASS_UNSPECIFIED",
		1: "ORDER_CLASS_BRACKET",
		2: "ORDER_CLASS_OTO",
		3: "ORDER_CLASS_OCO",
		4: "ORDER_CLASS_SIMPLE",
	}
	OrderClass_value = map[string]int32{
		"ORDER_CLASS_UNSPECIFIED": 0,
		"ORDER_CLASS_BRACKET":     1,
		"ORDER_CLASS_OTO":         2,
		"ORDER_CLASS_OCO":         3,
		"ORDER_CLASS_SIMPLE":      4,
	}
)

func (x OrderClass) Enum() *OrderClass {
	p := new(OrderClass)
	*p = x
	return p
}

func (x OrderClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderClass) Descriptor() protoreflect.EnumDescriptor {
	return file_tradesvc_v0_tradesvc_proto_enumTypes[2].Descriptor()
}

func (OrderClass) Type() protoreflect.EnumType {
	return &file_tradesvc_v0_tradesvc_proto_enumTypes[2]
}

func (x OrderClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderClass.Descriptor instead.
func (OrderClass) EnumDescriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{2}
}

type TimeInForce int32

const (
	TimeInForce_TIME_IN_FORCE_UNSPECIFIED TimeInForce = 0
	TimeInForce_TIME_IN_FORCE_DAY         TimeInForce = 1
	TimeInForce_TIME_IN_FORCE_GTC         TimeInForce = 2
	TimeInForce_TIME_IN_FORCE_OPG         TimeInForce = 3
	TimeInForce_TIME_IN_FORCE_IOC         TimeInForce = 4
	TimeInForce_TIME_IN_FORCE_FOK         TimeInForce = 5
	TimeInForce_TIME_IN_FORCE_GTX         TimeInForce = 6
	TimeInForce_TIME_IN_FORCE_GTD         TimeInForce = 7
	TimeInForce_TIME_IN_FORCE_CLS         TimeInForce = 8
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0: "TIME_IN_FORCE_UNSPECIFIED",
		1: "TIME_IN_FORCE_DAY",
		2: "TIME_IN_FORCE_GTC",
		3: "TIME_IN_FORCE_OPG",
		4: "TIME_IN_FORCE_IOC",
		5: "TIME_IN_FORCE_FOK",
		6: "TIME_IN_FORCE_GTX",
		7: "TIME_IN_FORCE_GTD",
		8: "TIME_IN_FORCE_CLS",
	}
	TimeInForce_value = map[string]int32{
		"TIME_IN_FORCE_UNSPECIFIED": 0,
		"TIME_IN_FORCE_DAY":         1,
		"TIME_IN_FORCE_GTC":         2,
		"TIME_IN_FORCE_OPG":         3,
		"TIME_IN_FORCE_IOC":         4,
		"TIME_IN_FORCE_FOK":         5,
		"TIME_IN_FORCE_GTX":         6,
		"TIME_IN_FORCE_GTD":         7,
		"TIME_IN_FORCE_CLS":         8,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_tradesvc_v0_tradesvc_proto_enumTypes[3].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_tradesvc_v0_tradesvc_proto_enumTypes[3]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{3}
}

type PositionIntent int32

const (
	PositionIntent_POSITION_INTENT_UNSPECIFIED   PositionIntent = 0
	PositionIntent_POSITION_INTENT_BUY_TO_OPEN   PositionIntent = 1
	PositionIntent_POSITION_INTENT_BUY_TO_CLOSE  PositionIntent = 2
	PositionIntent_POSITION_INTENT_SELL_TO_OPEN  PositionIntent = 3
	PositionIntent_POSITION_INTENT_SELL_TO_CLOSE PositionIntent = 4
)

// Enum value maps for PositionIntent.
var (
	PositionIntent_name = map[int32]string{
		0: "POSITION_INTENT_UNSPECIFIED",
		1: "POSITION_INTENT_BUY_TO_OPEN",
		2: "POSITION_INTENT_BUY_TO_CLOSE",
		3: "POSITION_INTENT_SELL_TO_OPEN",
		4: "POSITION_INTENT_SELL_TO_CLOSE",
	}
	PositionIntent_value = map[string]int32{
		"POSITION_INTENT_UNSPECIFIED":   0,
		"POSITION_INTENT_BUY_TO_OPEN":   1,
		"POSITION_INTENT_BUY_TO_CLOSE":  2,
		"POSITION_INTENT_SELL_TO_OPEN":  3,
		"POSITION_INTENT_SELL_TO_CLOSE": 4,
	}
)

func (x PositionIntent) Enum() *PositionIntent {
	p := new(PositionIntent)
	*p = x
	return p
}

func (x PositionIntent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionIntent) Descriptor() protoreflect.EnumDescriptor {
	return file_tradesvc_v0_tradesvc_proto_enumTypes[4].Descriptor()
}

func (PositionIntent) Type() protoreflect.EnumType {
	return &file_tradesvc_v0_tradesvc_proto_enumTypes[4]
}

func (x PositionIntent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionIntent.Descriptor instead.
func (PositionIntent) EnumDescriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{4}
}

type AssetClass int32

const (
	AssetClass_ASSET_CLASS_UNSPECIFIED AssetClass = 0
	AssetClass_ASSET_CLASS_US_EQUITY   AssetClass = 1
	AssetClass_ASSET_CLASS_CRYPTO      AssetClass = 2
)

// Enum value maps for AssetClass.
var (
	AssetClass_name = map[int32]string{
		0: "ASSET_CLASS_UNSPECIFIED",
		1: "ASSET_CLASS_US_EQUITY",
		2: "ASSET_CLASS_CRYPTO",
	}
	AssetClass_value = map[string]int32{
		"ASSET_CLASS_UNSPECIFIED": 0,
		"ASSET_CLASS_US_EQUITY":   1,
		"ASSET_CLASS_CRYPTO":      2,
	}
)

func (x AssetClass) Enum() *AssetClass {
	p := new(AssetClass)
	*p = x
	return p
}

func (x AssetClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetClass) Descriptor() protoreflect.EnumDescriptor {
	return file_tradesvc_v0_tradesvc_proto_enumTypes[5].Descriptor()
}

func (AssetClass) Type() protoreflect.EnumType {
	return &file_tradesvc_v0_tradesvc_proto_enumTypes[5]
}

func (x AssetClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetClass.Descriptor instead.
func (AssetClass) EnumDescriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{5}
}

type TakeProfit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitPrice string `protobuf:"bytes,1,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`
}

func (x *TakeProfit) Reset() {
	*x = TakeProfit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeProfit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeProfit) ProtoMessage() {}

func (x *TakeProfit) ProtoReflect() protoreflect.Message {
	mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeProfit.ProtoReflect.Descriptor instead.
func (*TakeProfit) Descriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{0}
}

func (x *TakeProfit) GetLimitPrice() string {
	if x != nil {
		return x.LimitPrice
	}
	return ""
}

type StopLoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Stop  string `protobuf:"bytes,2,opt,name=stop,proto3" json:"stop,omitempty"`
}

func (x *StopLoss) Reset() {
	*x = StopLoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopLoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopLoss) ProtoMessage() {}

func (x *StopLoss) ProtoReflect() protoreflect.Message {
	mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopLoss.ProtoReflect.Descriptor instead.
func (*StopLoss) Descriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{1}
}

func (x *StopLoss) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *StopLoss) GetStop() string {
	if x != nil {
		return x.Stop
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientOrderId string                 `protobuf:"bytes,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SubmittedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	// optional
	FilledAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=filled_at,json=filledAt,proto3" json:"filled_at,omitempty"`
	ExpiredAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	CanceledAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=canceled_at,json=canceledAt,proto3" json:"canceled_at,omitempty"`
	FailedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=failed_at,json=failedAt,proto3" json:"failed_at,omitempty"`
	ReplacedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=replaced_at,json=replacedAt,proto3" json:"replaced_at,omitempty"`
	// optional
	ReplacedBy     string      `protobuf:"bytes,11,opt,name=replaced_by,json=replacedBy,proto3" json:"replaced_by,omitempty"`
	Replaces       string      `protobuf:"bytes,12,opt,name=replaces,proto3" json:"replaces,omitempty"`
	AssetId        string      `protobuf:"bytes,13,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Symbol         string      `protobuf:"bytes,14,opt,name=symbol,proto3" json:"symbol,omitempty"`
	AssetClass     AssetClass  `protobuf:"varint,15,opt,name=asset_class,json=assetClass,proto3,enum=tradesvc.v0.AssetClass" json:"asset_class,omitempty"`
	OrderClass     OrderClass  `protobuf:"varint,16,opt,name=order_class,json=orderClass,proto3,enum=tradesvc.v0.OrderClass" json:"order_class,omitempty"`
	Type           OrderType   `protobuf:"varint,17,opt,name=type,proto3,enum=tradesvc.v0.OrderType" json:"type,omitempty"`
	Side           Side        `protobuf:"varint,18,opt,name=side,proto3,enum=tradesvc.v0.Side" json:"side,omitempty"`
	TimeInForce    TimeInForce `protobuf:"varint,19,opt,name=time_in_force,json=timeInForce,proto3,enum=tradesvc.v0.TimeInForce" json:"time_in_force,omitempty"`
	Status         string      `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`
	Notional       string      `protobuf:"bytes,21,opt,name=notional,proto3" json:"notional,omitempty"`
	Qty            string      `protobuf:"bytes,22,opt,name=qty,proto3" json:"qty,omitempty"`
	FilledQty      string      `protobuf:"bytes,23,opt,name=filled_qty,json=filledQty,proto3" json:"filled_qty,omitempty"`
	FilledAvgPrice string      `protobuf:"bytes,24,opt,name=filled_avg_price,json=filledAvgPrice,proto3" json:"filled_avg_price,omitempty"`
	LimitPrice     string      `protobuf:"bytes,25,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`
	StopPrice      string      `protobuf:"bytes,26,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	TrailPrice     string      `protobuf:"bytes,27,opt,name=trail_price,json=trailPrice,proto3" json:"trail_price,omitempty"`
	TrailPercent   string      `protobuf:"bytes,28,opt,name=trail_percent,json=trailPercent,proto3" json:"trail_percent,omitempty"`
	Hwm            string      `protobuf:"bytes,29,opt,name=hwm,proto3" json:"hwm,omitempty"`
	ExtHours       bool        `protobuf:"varint,30,opt,name=ext_hours,json=extHours,proto3" json:"ext_hours,omitempty"`
	Legs           []*Order    `protobuf:"bytes,31,rep,name=legs,proto3" json:"legs,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{2}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *Order) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Order) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Order) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Order) GetFilledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FilledAt
	}
	return nil
}

func (x *Order) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

func (x *Order) GetCanceledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CanceledAt
	}
	return nil
}

func (x *Order) GetFailedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FailedAt
	}
	return nil
}

func (x *Order) GetReplacedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReplacedAt
	}
	return nil
}

func (x *Order) GetReplacedBy() string {
	if x != nil {
		return x.ReplacedBy
	}
	return ""
}

func (x *Order) GetReplaces() string {
	if x != nil {
		return x.Replaces
	}
	return ""
}

func (x *Order) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Order) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Order) GetAssetClass() AssetClass {
	if x != nil {
		return x.AssetClass
	}
	return AssetClass_ASSET_CLASS_UNSPECIFIED
}

func (x *Order) GetOrderClass() OrderClass {
	if x != nil {
		return x.OrderClass
	}
	return OrderClass_ORDER_CLASS_UNSPECIFIED
}

func (x *Order) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *Order) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *Order) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_TIME_IN_FORCE_UNSPECIFIED
}

func (x *Order) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Order) GetNotional() string {
	if x != nil {
		return x.Notional
	}
	return ""
}

func (x *Order) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *Order) GetFilledQty() string {
	if x != nil {
		return x.FilledQty
	}
	return ""
}

func (x *Order) GetFilledAvgPrice() string {
	if x != nil {
		return x.FilledAvgPrice
	}
	return ""
}

func (x *Order) GetLimitPrice() string {
	if x != nil {
		return x.LimitPrice
	}
	return ""
}

func (x *Order) GetStopPrice() string {
	if x != nil {
		return x.StopPrice
	}
	return ""
}

func (x *Order) GetTrailPrice() string {
	if x != nil {
		return x.TrailPrice
	}
	return ""
}

func (x *Order) GetTrailPercent() string {
	if x != nil {
		return x.TrailPercent
	}
	return ""
}

func (x *Order) GetHwm() string {
	if x != nil {
		return x.Hwm
	}
	return ""
}

func (x *Order) GetExtHours() bool {
	if x != nil {
		return x.ExtHours
	}
	return false
}

func (x *Order) GetLegs() []*Order {
	if x != nil {
		return x.Legs
	}
	return nil
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol         string         `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Qty            string         `protobuf:"bytes,2,opt,name=qty,proto3" json:"qty,omitempty"`
	Notional       string         `protobuf:"bytes,3,opt,name=notional,proto3" json:"notional,omitempty"`
	Side           Side           `protobuf:"varint,4,opt,name=side,proto3,enum=tradesvc.v0.Side" json:"side,omitempty"`
	OrderType      OrderType      `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3,enum=tradesvc.v0.OrderType" json:"order_type,omitempty"`
	Tif            TimeInForce    `protobuf:"varint,6,opt,name=tif,proto3,enum=tradesvc.v0.TimeInForce" json:"tif,omitempty"`
	LimitPrice     string         `protobuf:"bytes,7,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`
	ExtendedHours  bool           `protobuf:"varint,8,opt,name=extended_hours,json=extendedHours,proto3" json:"extended_hours,omitempty"`
	StopPrice      string         `protobuf:"bytes,9,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	Class          OrderClass     `protobuf:"varint,11,opt,name=class,proto3,enum=tradesvc.v0.OrderClass" json:"class,omitempty"`
	TakeProfit     *TakeProfit    `protobuf:"bytes,12,opt,name=take_profit,json=takeProfit,proto3" json:"take_profit,omitempty"`
	StopLoss       *StopLoss      `protobuf:"bytes,13,opt,name=stop_loss,json=stopLoss,proto3" json:"stop_loss,omitempty"`
	TrailPrice     string         `protobuf:"bytes,14,opt,name=trail_price,json=trailPrice,proto3" json:"trail_price,omitempty"`
	TrailPercent   string         `protobuf:"bytes,15,opt,name=trail_percent,json=trailPercent,proto3" json:"trail_percent,omitempty"`
	PositionIntent PositionIntent `protobuf:"varint,16,opt,name=position_intent,json=positionIntent,proto3,enum=tradesvc.v0.PositionIntent" json:"position_intent,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{3}
}

func (x *Trade) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Trade) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *Trade) GetNotional() string {
	if x != nil {
		return x.Notional
	}
	return ""
}

func (x *Trade) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *Trade) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *Trade) GetTif() TimeInForce {
	if x != nil {
		return x.Tif
	}
	return TimeInForce_TIME_IN_FORCE_UNSPECIFIED
}

func (x *Trade) GetLimitPrice() string {
	if x != nil {
		return x.LimitPrice
	}
	return ""
}

func (x *Trade) GetExtendedHours() bool {
	if x != nil {
		return x.ExtendedHours
	}
	return false
}

func (x *Trade) GetStopPrice() string {
	if x != nil {
		return x.StopPrice
	}
	return ""
}

func (x *Trade) GetClass() OrderClass {
	if x != nil {
		return x.Class
	}
	return OrderClass_ORDER_CLASS_UNSPECIFIED
}

func (x *Trade) GetTakeProfit() *TakeProfit {
	if x != nil {
		return x.TakeProfit
	}
	return nil
}

func (x *Trade) GetStopLoss() *StopLoss {
	if x != nil {
		return x.StopLoss
	}
	return nil
}

func (x *Trade) GetTrailPrice() string {
	if x != nil {
		return x.TrailPrice
	}
	return ""
}

func (x *Trade) GetTrailPercent() string {
	if x != nil {
		return x.TrailPercent
	}
	return ""
}

func (x *Trade) GetPositionIntent() PositionIntent {
	if x != nil {
		return x.PositionIntent
	}
	return PositionIntent_POSITION_INTENT_UNSPECIFIED
}

type TradeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	At          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=at,proto3" json:"at,omitempty"`
	Event       string                 `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	EventId     string                 `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ExecutionId string                 `protobuf:"bytes,4,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Order       *Order                 `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
	PositionQty string                 `protobuf:"bytes,6,opt,name=position_qty,json=positionQty,proto3" json:"position_qty,omitempty"`
	Price       string                 `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
	Qty         string                 `protobuf:"bytes,8,opt,name=qty,proto3" json:"qty,omitempty"`
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TradeUpdate) Reset() {
	*x = TradeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeUpdate) ProtoMessage() {}

func (x *TradeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeUpdate.ProtoReflect.Descriptor instead.
func (*TradeUpdate) Descriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{4}
}

func (x *TradeUpdate) GetAt() *timestamppb.Timestamp {
	if x != nil {
		return x.At
	}
	return nil
}

func (x *TradeUpdate) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *TradeUpdate) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *TradeUpdate) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *TradeUpdate) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *TradeUpdate) GetPositionQty() string {
	if x != nil {
		return x.PositionQty
	}
	return ""
}

func (x *TradeUpdate) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *TradeUpdate) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *TradeUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId                string     `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Symbol                 string     `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Exchange               string     `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	AssetClass             AssetClass `protobuf:"varint,4,opt,name=asset_class,json=assetClass,proto3,enum=tradesvc.v0.AssetClass" json:"asset_class,omitempty"`
	AssetMarginable        bool       `protobuf:"varint,5,opt,name=asset_marginable,json=assetMarginable,proto3" json:"asset_marginable,omitempty"`
	Qty                    string     `protobuf:"bytes,6,opt,name=qty,proto3" json:"qty,omitempty"`
	QtyAvailable           string     `protobuf:"bytes,7,opt,name=qty_available,json=qtyAvailable,proto3" json:"qty_available,omitempty"`
	AvgEntryPrice          string     `protobuf:"bytes,8,opt,name=avg_entry_price,json=avgEntryPrice,proto3" json:"avg_entry_price,omitempty"`
	Side                   string     `protobuf:"bytes,9,opt,name=side,proto3" json:"side,omitempty"`
	MarketValue            string     `protobuf:"bytes,10,opt,name=market_value,json=marketValue,proto3" json:"market_value,omitempty"`
	CostBasis              string     `protobuf:"bytes,11,opt,name=cost_basis,json=costBasis,proto3" json:"cost_basis,omitempty"`
	UnrealizedPl           string     `protobuf:"bytes,12,opt,name=unrealized_pl,json=unrealizedPl,proto3" json:"unrealized_pl,omitempty"`
	UnrealizedPlpc         string     `protobuf:"bytes,13,opt,name=unrealized_plpc,json=unrealizedPlpc,proto3" json:"unrealized_plpc,omitempty"`
	UnrealizedIntradayPl   string     `protobuf:"bytes,14,opt,name=unrealized_intraday_pl,json=unrealizedIntradayPl,proto3" json:"unrealized_intraday_pl,omitempty"`
	UnrealizedIntradayPlpc string     `protobuf:"bytes,15,opt,name=unrealized_intraday_plpc,json=unrealizedIntradayPlpc,proto3" json:"unrealized_intraday_plpc,omitempty"`
	CurrentPrice           string     `protobuf:"bytes,16,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	LastdayPrice           string     `protobuf:"bytes,17,opt,name=lastday_price,json=lastdayPrice,proto3" json:"lastday_price,omitempty"`
	ChangeToday            string     `protobuf:"bytes,18,opt,name=change_today,json=changeToday,proto3" json:"change_today,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{5}
}

func (x *Position) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Position) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Position) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Position) GetAssetClass() AssetClass {
	if x != nil {
		return x.AssetClass
	}
	return AssetClass_ASSET_CLASS_UNSPECIFIED
}

func (x *Position) GetAssetMarginable() bool {
	if x != nil {
		return x.AssetMarginable
	}
	return false
}

func (x *Position) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *Position) GetQtyAvailable() string {
	if x != nil {
		return x.QtyAvailable
	}
	return ""
}

func (x *Position) GetAvgEntryPrice() string {
	if x != nil {
		return x.AvgEntryPrice
	}
	return ""
}

func (x *Position) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *Position) GetMarketValue() string {
	if x != nil {
		return x.MarketValue
	}
	return ""
}

func (x *Position) GetCostBasis() string {
	if x != nil {
		return x.CostBasis
	}
	return ""
}

func (x *Position) GetUnrealizedPl() string {
	if x != nil {
		return x.UnrealizedPl
	}
	return ""
}

func (x *Position) GetUnrealizedPlpc() string {
	if x != nil {
		return x.UnrealizedPlpc
	}
	return ""
}

func (x *Position) GetUnrealizedIntradayPl() string {
	if x != nil {
		return x.UnrealizedIntradayPl
	}
	return ""
}

func (x *Position) GetUnrealizedIntradayPlpc() string {
	if x != nil {
		return x.UnrealizedIntradayPlpc
	}
	return ""
}

func (x *Position) GetCurrentPrice() string {
	if x != nil {
		return x.CurrentPrice
	}
	return ""
}

func (x *Position) GetLastdayPrice() string {
	if x != nil {
		return x.LastdayPrice
	}
	return ""
}

func (x *Position) GetChangeToday() string {
	if x != nil {
		return x.ChangeToday
	}
	return ""
}

type Positions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions []*Position `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *Positions) Reset() {
	*x = Positions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Positions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Positions) ProtoMessage() {}

func (x *Positions) ProtoReflect() protoreflect.Message {
	mi := &file_tradesvc_v0_tradesvc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Positions.ProtoReflect.Descriptor instead.
func (*Positions) Descriptor() ([]byte, []int) {
	return file_tradesvc_v0_tradesvc_proto_rawDescGZIP(), []int{6}
}

func (x *Positions) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

var File_tradesvc_v0_tradesvc_proto protoreflect.FileDescriptor

var file_tradesvc_v0_tradesvc_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x30, 0x2f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x0a, 0x54, 0x61,
	0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x08, 0x53, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x22,
	0xfc, 0x09, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x38, 0x0a,
	0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x51, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x77, 0x6d, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x77, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x30, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x22, 0xe7,
	0x04, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x25,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x03,
	0x74, 0x69, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x52, 0x03, 0x74, 0x69, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x30, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x0a, 0x74, 0x61,
	0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x02, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9e, 0x05, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x74,
	0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x71, 0x74, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x70, 0x6c, 0x70, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6c, 0x70, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x64,
	0x61, 0x79, 0x5f, 0x70, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x64, 0x61, 0x79, 0x50,
	0x6c, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x72, 0x61, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x6c, 0x70, 0x63, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x72, 0x61, 0x64, 0x61, 0x79, 0x50, 0x6c, 0x70, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x64, 0x61, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x22, 0x40, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x39, 0x0a, 0x04, 0x53, 0x69,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45,
	0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0xa2, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x05, 0x2a, 0x84, 0x01, 0x0a, 0x0a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4f,
	0x54, 0x4f, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x4f, 0x43, 0x4f, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10,
	0x04, 0x2a, 0xe4, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x54, 0x43, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f,
	0x4f, 0x50, 0x47, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4f, 0x43, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x4f,
	0x4b, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x54, 0x58, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x54, 0x44, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x4c, 0x53, 0x10, 0x08, 0x2a, 0xb9, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x42, 0x55, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x42, 0x55, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x04, 0x2a, 0x5c, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f,
	0x10, 0x02, 0x42, 0x57, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6c, 0x70, 0x61, 0x63,
	0x61, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6e, 0x74, 0x68, 0x6f, 0x6e, 0x79, 0x48, 0x65,
	0x77, 0x69, 0x6e, 0x73, 0x2f, 0x6e, 0x61, 0x6c, 0x70, 0x61, 0x63, 0x61, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x73, 0x76, 0x63, 0x2f,
	0x76, 0x30, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tradesvc_v0_tradesvc_proto_rawDescOnce sync.Once
	file_tradesvc_v0_tradesvc_proto_rawDescData = file_tradesvc_v0_tradesvc_proto_rawDesc
)

func file_tradesvc_v0_tradesvc_proto_rawDescGZIP() []byte {
	file_tradesvc_v0_tradesvc_proto_rawDescOnce.Do(func() {
		file_tradesvc_v0_tradesvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_tradesvc_v0_tradesvc_proto_rawDescData)
	})
	return file_tradesvc_v0_tradesvc_proto_rawDescData
}

var file_tradesvc_v0_tradesvc_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_tradesvc_v0_tradesvc_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tradesvc_v0_tradesvc_proto_goTypes = []interface{}{
	(Side)(0),                     // 0: tradesvc.v0.Side
	(OrderType)(0),                // 1: tradesvc.v0.OrderType
	(OrderClass)(0),               // 2: tradesvc.v0.OrderClass
	(TimeInForce)(0),              // 3: tradesvc.v0.TimeInForce
	(PositionIntent)(0),           // 4: tradesvc.v0.PositionIntent
	(AssetClass)(0),               // 5: tradesvc.v0.AssetClass
	(*TakeProfit)(nil),            // 6: tradesvc.v0.TakeProfit
	(*StopLoss)(nil),              // 7: tradesvc.v0.StopLoss
	(*Order)(nil),                 // 8: tradesvc.v0.Order
	(*Trade)(nil),                 // 9: tradesvc.v0.Trade
	(*TradeUpdate)(nil),           // 10: tradesvc.v0.TradeUpdate
	(*Position)(nil),              // 11: tradesvc.v0.Position
	(*Positions)(nil),             // 12: tradesvc.v0.Positions
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
}
var file_tradesvc_v0_tradesvc_proto_depIdxs = []int32{
	13, // 0: tradesvc.v0.Order.created_at:type_name -> google.protobuf.Timestamp
	13, // 1: tradesvc.v0.Order.updated_at:type_name -> google.protobuf.Timestamp
	13, // 2: tradesvc.v0.Order.submitted_at:type_name -> google.protobuf.Timestamp
	13, // 3: tradesvc.v0.Order.filled_at:type_name -> google.protobuf.Timestamp
	13, // 4: tradesvc.v0.Order.expired_at:type_name -> google.protobuf.Timestamp
	13, // 5: tradesvc.v0.Order.canceled_at:type_name -> google.protobuf.Timestamp
	13, // 6: tradesvc.v0.Order.failed_at:type_name -> google.protobuf.Timestamp
	13, // 7: tradesvc.v0.Order.replaced_at:type_name -> google.protobuf.Timestamp
	5,  // 8: tradesvc.v0.Order.asset_class:type_name -> tradesvc.v0.AssetClass
	2,  // 9: tradesvc.v0.Order.order_class:type_name -> tradesvc.v0.OrderClass
	1,  // 10: tradesvc.v0.Order.type:type_name -> tradesvc.v0.OrderType
	0,  // 11: tradesvc.v0.Order.side:type_name -> tradesvc.v0.Side
	3,  // 12: tradesvc.v0.Order.time_in_force:type_name -> tradesvc.v0.TimeInForce
	8,  // 13: tradesvc.v0.Order.legs:type_name -> tradesvc.v0.Order
	0,  // 14: tradesvc.v0.Trade.side:type_name -> tradesvc.v0.Side
	1,  // 15: tradesvc.v0.Trade.order_type:type_name -> tradesvc.v0.OrderType
	3,  // 16: tradesvc.v0.Trade.tif:type_name -> tradesvc.v0.TimeInForce
	2,  // 17: tradesvc.v0.Trade.class:type_name -> tradesvc.v0.OrderClass
	6,  // 18: tradesvc.v0.Trade.take_profit:type_name -> tradesvc.v0.TakeProfit
	7,  // 19: tradesvc.v0.Trade.stop_loss:type_name -> tradesvc.v0.StopLoss
	4,  // 20: tradesvc.v0.Trade.position_intent:type_name -> tradesvc.v0.PositionIntent
	13, // 21: tradesvc.v0.TradeUpdate.at:type_name -> google.protobuf.Timestamp
	8,  // 22: tradesvc.v0.TradeUpdate.order:type_name -> tradesvc.v0.Order
	13, // 23: tradesvc.v0.TradeUpdate.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 24: tradesvc.v0.Position.asset_class:type_name -> tradesvc.v0.AssetClass
	11, // 25: tradesvc.v0.Positions.positions:type_name -> tradesvc.v0.Position
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_tradesvc_v0_tradesvc_proto_init() }
func file_tradesvc_v0_tradesvc_proto_init() {
	if File_tradesvc_v0_tradesvc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tradesvc_v0_tradesvc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeProfit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradesvc_v0_tradesvc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopLoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradesvc_v0_tradesvc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradesvc_v0_tradesvc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradesvc_v0_tradesvc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradesvc_v0_tradesvc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradesvc_v0_tradesvc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Positions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tradesvc_v0_tradesvc_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tradesvc_v0_tradesvc_proto_goTypes,
		DependencyIndexes: file_tradesvc_v0_tradesvc_proto_depIdxs,
		EnumInfos:         file_tradesvc_v0_tradesvc_proto_enumTypes,
		MessageInfos:      file_tradesvc_v0_tradesvc_proto_msgTypes,
	}.Build()
	File_tradesvc_v0_tradesvc_proto = out.File
	file_tradesvc_v0_tradesvc_proto_rawDesc = nil
	file_tradesvc_v0_tradesvc_proto_goTypes = nil
	file_tradesvc_v0_tradesvc_proto_depIdxs = nil
}
